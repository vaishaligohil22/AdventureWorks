/*
 * Advanture Works
 *
 * This is a sample server for Advanture Works.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace AdventureWorks.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductPhoto : IEquatable<ProductPhoto>
    { 
        /// <summary>
        /// Gets or Sets ProductPhotoID
        /// </summary>
        [Required]
        [DataMember(Name="productPhotoID")]
        public long ProductPhotoID { get; set; }

        /// <summary>
        /// Gets or Sets ThumbNailPhoto
        /// </summary>
        [DataMember(Name="thumbNailPhoto")]
        public string ThumbNailPhoto { get; set; }

        /// <summary>
        /// Gets or Sets ThumbNailPhotoFileName
        /// </summary>
        [DataMember(Name="thumbNailPhotoFileName")]
        public string ThumbNailPhotoFileName { get; set; }

        /// <summary>
        /// Gets or Sets LargePhoto
        /// </summary>
        [DataMember(Name="largePhoto")]
        public string LargePhoto { get; set; }

        /// <summary>
        /// Gets or Sets LargePhotoFileName
        /// </summary>
        [DataMember(Name="largePhotoFileName")]
        public string LargePhotoFileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductPhoto {\n");
            sb.Append("  ProductPhotoID: ").Append(ProductPhotoID).Append("\n");
            sb.Append("  ThumbNailPhoto: ").Append(ThumbNailPhoto).Append("\n");
            sb.Append("  ThumbNailPhotoFileName: ").Append(ThumbNailPhotoFileName).Append("\n");
            sb.Append("  LargePhoto: ").Append(LargePhoto).Append("\n");
            sb.Append("  LargePhotoFileName: ").Append(LargePhotoFileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductPhoto)obj);
        }

        /// <summary>
        /// Returns true if ProductPhoto instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductPhoto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductPhoto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductPhotoID == other.ProductPhotoID ||
                    ProductPhotoID != null &&
                    ProductPhotoID.Equals(other.ProductPhotoID)
                ) && 
                (
                    ThumbNailPhoto == other.ThumbNailPhoto ||
                    ThumbNailPhoto != null &&
                    ThumbNailPhoto.Equals(other.ThumbNailPhoto)
                ) && 
                (
                    ThumbNailPhotoFileName == other.ThumbNailPhotoFileName ||
                    ThumbNailPhotoFileName != null &&
                    ThumbNailPhotoFileName.Equals(other.ThumbNailPhotoFileName)
                ) && 
                (
                    LargePhoto == other.LargePhoto ||
                    LargePhoto != null &&
                    LargePhoto.Equals(other.LargePhoto)
                ) && 
                (
                    LargePhotoFileName == other.LargePhotoFileName ||
                    LargePhotoFileName != null &&
                    LargePhotoFileName.Equals(other.LargePhotoFileName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProductPhotoID != null)
                    hashCode = hashCode * 59 + ProductPhotoID.GetHashCode();
                    if (ThumbNailPhoto != null)
                    hashCode = hashCode * 59 + ThumbNailPhoto.GetHashCode();
                    if (ThumbNailPhotoFileName != null)
                    hashCode = hashCode * 59 + ThumbNailPhotoFileName.GetHashCode();
                    if (LargePhoto != null)
                    hashCode = hashCode * 59 + LargePhoto.GetHashCode();
                    if (LargePhotoFileName != null)
                    hashCode = hashCode * 59 + LargePhotoFileName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductPhoto left, ProductPhoto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductPhoto left, ProductPhoto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
